import streamlit as st
import pickle
import datetime
import pandas as pd
from gpt_helper import explain_with_gpt
from modules import ai_models, data_upload, hypothesis_testing, outliers, profiling, sql_gpt, pivot_table, visualizations,settings
from utils.theme import set_theme

# --- –ó–∞–≥–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
st.set_page_config(page_title="üìä Data Analyzer", layout="wide", initial_sidebar_state="expanded")
set_theme()

# --- –°—Ç–∞–Ω —Å—Ç–æ—Ä—ñ–Ω–∫–∏
if "selected_page" not in st.session_state:
    st.session_state["selected_page"] = list({
        "üìÅ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö": data_upload,
        "üß¨ –ü—Ä–æ—Ñ–∞–π–ª—ñ–Ω–≥ –¥–∞–Ω–∏—Ö": profiling,
        "üö® –í–∏—è–≤–ª–µ–Ω–Ω—è –≤–∏–∫–∏–¥—ñ–≤": outliers,
        "üìà –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó": visualizations,
        "ü§ñ –®—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç": ai_models,
        "üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≥—ñ–ø–æ—Ç–µ–∑": hypothesis_testing,
        "üí¨ SQL —á–µ—Ä–µ–∑ GPT": sql_gpt,
        "üìä –ó–≤–µ–¥–µ–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ": pivot_table,
        "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è": settings

    }.keys())[0]

# --- –ü–æ—à—É–∫
st.title("üìä Data Analyzer App")
search_query = st.text_input("üîç –®—É–∫–∞—Ç–∏ —Ä–æ–∑–¥—ñ–ª:", "")
PAGES = {
    "üìÅ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö": data_upload,
    "üß¨ –ü—Ä–æ—Ñ–∞–π–ª—ñ–Ω–≥ –¥–∞–Ω–∏—Ö": profiling,
    "üö® –í–∏—è–≤–ª–µ–Ω–Ω—è –≤–∏–∫–∏–¥—ñ–≤": outliers,
    "üìà –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó": visualizations,
    "ü§ñ –®—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç": ai_models,
    "üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≥—ñ–ø–æ—Ç–µ–∑": hypothesis_testing,
    "üí¨ SQL —á–µ—Ä–µ–∑ GPT": sql_gpt,
    "üìä –ó–≤–µ–¥–µ–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ": pivot_table,
    "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è": settings

}
page_options = [page for page in PAGES if search_query.lower() in page.lower()]
selected_page = st.selectbox("üìÇ –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:", page_options, index=page_options.index(st.session_state["selected_page"]) if st.session_state["selected_page"] in page_options else 0)
st.session_state["selected_page"] = selected_page
page = PAGES[selected_page]

# --- –°–∞–π–¥–±–∞—Ä: —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –¥–∞–Ω—ñ
st.sidebar.title("üß≠ –ú–µ–Ω—é –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó")
explain_with_gpt(f"–ü–æ—è—Å–Ω–∏ –∑–º—ñ—Å—Ç —Ä–æ–∑–¥—ñ–ª—É: {selected_page}")

if "data" in st.session_state and st.session_state["data"] is not None:
    df = st.session_state["data"]
    st.sidebar.markdown("### üìã –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –¥–∞–Ω—ñ")
    st.sidebar.write(f"**–†–æ–∑–º—ñ—Ä:** `{df.shape[0]} x {df.shape[1]}`")
    st.sidebar.write("**–°—Ç–æ–≤–ø—Ü—ñ:**", list(df.columns))

    with st.sidebar.expander("üìä –ö–æ—Ä–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"):
        st.dataframe(df.describe().T, use_container_width=True)

    if st.sidebar.button("üì• –ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–≤—ñ—Ç (CSV)"):
        st.sidebar.download_button("‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ CSV", df.to_csv(index=False), file_name="data_export.csv")

    if st.sidebar.button("üß† –ü–æ—è—Å–Ω–∏ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º"):
        explain_with_gpt(f"–û–ø–∏—à–∏ —Ü—ñ –¥–∞–Ω—ñ: {df.head().to_string()}")

    # --- –°–µ—Å—ñ—è: –∑–±–µ—Ä–µ–≥—Ç–∏/–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏
    with st.sidebar.expander("üíæ –°–µ—Å—ñ—è"):
        if st.button("üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ —Å–µ—Å—ñ—é"):
            with open("session.pkl", "wb") as f:
                pickle.dump(st.session_state, f)
            st.success("–°–µ—Å—ñ—é –∑–±–µ—Ä–µ–∂–µ–Ω–æ ‚úÖ")

        if st.button("üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–µ—Å—ñ—é"):
            try:
                with open("session.pkl", "rb") as f:
                    st.session_state.update(pickle.load(f))
                st.rerun()
            except FileNotFoundError:
                st.warning("–§–∞–π–ª —Å–µ—Å—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    if st.sidebar.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –¥–∞–Ω—ñ"):
        st.session_state["data"] = None
        st.rerun()
else:
    st.sidebar.warning("‚ö†Ô∏è –î–∞–Ω—ñ —â–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ.")

# --- –ü–æ—Ä–∞–¥–∏
tips = {
    "üìÅ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö": "–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ CSV –∞–±–æ Excel-—Ñ–∞–π–ª.",
    "üß¨ –ü—Ä–æ—Ñ–∞–π–ª—ñ–Ω–≥ –¥–∞–Ω–∏—Ö": "–î—ñ–∑–Ω–∞–π—Ç–µ—Å—å —Ç–∏–ø–∏, –ø—Ä–æ–ø—É—Å–∫–∏ —Ç–∞ –æ–ø–∏—Å–æ–≤—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.",
    "üö® –í–∏—è–≤–ª–µ–Ω–Ω—è –≤–∏–∫–∏–¥—ñ–≤": "–í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∞–Ω–æ–º–∞–ª—å–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å.",
    "üìà –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó": "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É.",
    "ü§ñ –®—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç": "–ú–æ–¥–µ–ª—ñ ML –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É.",
    "üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≥—ñ–ø–æ—Ç–µ–∑": "–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≥—Ä—É–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω–æ.",
    "üí¨ SQL —á–µ—Ä–µ–∑ GPT": "–ù–∞–ø–∏—à—ñ—Ç—å –∑–∞–ø–∏—Ç —Å–ª–æ–≤–∞–º–∏ ‚Äî GPT —Å—Ç–≤–æ—Ä–∏—Ç—å SQL.",
    "üìä –ó–≤–µ–¥–µ–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ": "–ü—ñ–¥—Å—É–º–æ–∫ —ñ –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö.",
    "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è": "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ –≤–∏–≥–ª—è–¥—É, API-–∫–ª—é—á—ñ–≤ —ñ –∫–µ—à—É."

}
if selected_page in tips:
    st.sidebar.info(f"üìå {tips[selected_page]}")

# --- –ù–æ—Ç–∞—Ç–∫–∏
with st.sidebar.expander("üìù –ù–æ—Ç–∞—Ç–∫–∏"):
    st.session_state["user_notes"] = st.text_area("–í–∞—à—ñ –Ω–æ—Ç–∞—Ç–∫–∏:", value=st.session_state.get("user_notes", ""))

# --- –¶—ñ–ª—å —Å–µ—Å—ñ—ó
with st.sidebar.expander("üéØ –ú–µ—Ç–∞ —Å–µ—Å—ñ—ó"):
    st.session_state["session_goal"] = st.text_input("–¶—ñ–ª—å —Å—å–æ–≥–æ–¥–Ω—ñ:", value=st.session_state.get("session_goal", ""))

# --- –°—Ç–∞—Ä—Ç —Å–µ—Å—ñ—ó
if "session_start" not in st.session_state:
    st.session_state["session_start"] = datetime.datetime.now()
st.sidebar.markdown(f"‚è±Ô∏è –ü–æ—á–∞—Ç–æ–∫: **{st.session_state['session_start'].strftime('%H:%M:%S')}**")

# --- –õ–æ–≥ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –¥—ñ–π
with st.sidebar.expander("üïò –ñ—É—Ä–Ω–∞–ª –¥—ñ–π"):
    if "log" not in st.session_state:
        st.session_state["log"] = []
    new_entry = f"{datetime.datetime.now().strftime('%H:%M:%S')} | {selected_page}"
    if not st.session_state["log"] or st.session_state["log"][-1] != new_entry:
        st.session_state["log"].append(new_entry)
    st.text("\n".join(st.session_state["log"][-5:]))

# --- –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
page.app()

# --- –ö–Ω–æ–ø–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ–≥–æ—Ä–∏ (–æ–Ω–æ–≤–ª–µ–Ω–∞)
st.markdown("""
<style>
.scroll-to-top {
    position: fixed;
    bottom: 20px;
    right: 20px;
    background-color: #1abc9c;
    color: white;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    font-size: 24px;
    text-align: center;
    line-height: 40px;
    cursor: pointer;
    box-shadow: 0 4px 10px rgba(0,0,0,0.3);
    z-index: 1001;
}
</style>
<script>
const btn = document.createElement('div');
btn.className = 'scroll-to-top';
btn.innerHTML = '‚Üë';
btn.onclick = () => window.scrollTo({ top: 0, behavior: 'smooth' });
document.body.appendChild(btn);
</script>
""", unsafe_allow_html=True)
