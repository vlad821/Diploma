import streamlit as st
import scipy.stats as stats
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from gpt_helper import explain_with_gpt  # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ —Ü—è —Ñ—É–Ω–∫—Ü—ñ—è —É —Ç–µ–±–µ —î

def app():
    st.title("üß™ –°—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≥—ñ–ø–æ—Ç–µ–∑")

    with st.expander("‚ÑπÔ∏è –©–æ —Ç–∞–∫–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≥—ñ–ø–æ—Ç–µ–∑?"):
        st.markdown("""
        **–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω–∏—Ö –≥—ñ–ø–æ—Ç–µ–∑** ‚Äî —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∏–ø—É—â–µ–Ω—å –ø—Ä–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ—ó —Å—É–∫—É–ø–Ω–æ—Å—Ç—ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∏–±—ñ—Ä–∫–∏.

        - **H‚ÇÄ**: –Ω–µ–º–∞—î —Å—É—Ç—Ç—î–≤–æ—ó —Ä—ñ–∑–Ω–∏—Ü—ñ –∞–±–æ –∑–≤'—è–∑–∫—É.
        - **H‚ÇÅ**: —ñ—Å–Ω—É—î —Å—É—Ç—Ç—î–≤–∞ —Ä—ñ–∑–Ω–∏—Ü—è –∞–±–æ –∑–≤‚Äô—è–∑–æ–∫.

        –î–æ—Å—Ç—É–ø–Ω—ñ —Ç–µ—Å—Ç–∏:
        - t-—Ç–µ—Å—Ç,
        - ANOVA,
        - Z-—Ç–µ—Å—Ç,
        - –£—ó—Ç–Ω—ñ-–ú–∞–Ω–Ω–∞ (Mann-Whitney U),
        - –•—ñ-–∫–≤–∞–¥—Ä–∞—Ç (Chi-square),
        - –ö–æ—Ä–µ–ª—è—Ü—ñ—è –ü—ñ—Ä—Å–æ–Ω–∞.
        """)

    if "data" not in st.session_state:
        st.warning("üìÇ –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –¥–∞–Ω—ñ –Ω–∞ –≤–∫–ª–∞–¥—Ü—ñ '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö'")
        return

    df = st.session_state["data"]
    numeric_cols = df.select_dtypes(include='number').columns
    categorical_cols = df.select_dtypes(include=['object', 'category']).columns

    st.subheader("üîé –í–∏–±–µ—Ä—ñ—Ç—å —Ç–µ—Å—Ç")
    test_choice = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Ç–µ—Å—Ç", [
        "t-—Ç–µ—Å—Ç",
        "ANOVA",
        "Z-—Ç–µ—Å—Ç",
        "–£—ó—Ç–Ω—ñ-–ú–∞–Ω–Ω–∞ (Mann-Whitney U)",
        "–•—ñ-–∫–≤–∞–¥—Ä–∞—Ç (Chi-square)",
        "–ö–æ—Ä–µ–ª—è—Ü—ñ—è –ü—ñ—Ä—Å–æ–Ω–∞"
    ])

    if test_choice == "t-—Ç–µ—Å—Ç":
        col1 = st.selectbox("–ó–º—ñ–Ω–Ω–∞ 1", numeric_cols, key="ttest_col1")
        col2 = st.selectbox("–ó–º—ñ–Ω–Ω–∞ 2", [col for col in numeric_cols if col != col1], key="ttest_col2")
        sample1 = df[col1].dropna()
        sample2 = df[col2].dropna()
        t_stat, p_value = stats.ttest_ind(sample1, sample2)
        st.write(f"t-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {t_stat:.4f}")
        st.write(f"p-–∑–Ω–∞—á–µ–Ω–Ω—è: {p_value:.4f}")

        fig, ax = plt.subplots()
        sns.boxplot(data=df[[col1, col2]], ax=ax)
        ax.set_title(f"Boxplot –¥–ª—è {col1} —Ç–∞ {col2}")
        st.pyplot(fig)

        conclusion = "–í—ñ–¥—Ö–∏–ª—è—î–º–æ H‚ÇÄ: —î –∑–Ω–∞—á—É—â–∞ —Ä—ñ–∑–Ω–∏—Ü—è." if p_value < 0.05 else "–ù–µ –≤—ñ–¥—Ö–∏–ª—è—î–º–æ H‚ÇÄ: –∑–Ω–∞—á—É—â–æ—ó —Ä—ñ–∑–Ω–∏—Ü—ñ –Ω–µ–º–∞—î."
        st.info(conclusion)

        prompt = f"–ü–æ—è—Å–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ t-—Ç–µ—Å—Ç—É: t={t_stat:.4f}, p={p_value:.4f} –¥–ª—è –∑–º—ñ–Ω–Ω–∏—Ö {col1} —ñ {col2}."
        st.markdown(explain_with_gpt(prompt))

    elif test_choice == "ANOVA":
        if len(categorical_cols) == 0:
            st.error("–ü–æ—Ç—Ä—ñ–±–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è!")
            return
        num_col = st.selectbox("–ß–∏—Å–ª–æ–≤–∞ –∑–º—ñ–Ω–Ω–∞", numeric_cols)
        cat_col = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä—ñ–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞", categorical_cols)
        groups = [group.dropna() for name, group in df.groupby(cat_col)[num_col]]
        f_stat, p_value = stats.f_oneway(*groups)
        st.write(f"F-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {f_stat:.4f}")
        st.write(f"p-–∑–Ω–∞—á–µ–Ω–Ω—è: {p_value:.4f}")

        fig, ax = plt.subplots()
        sns.boxplot(x=cat_col, y=num_col, data=df, ax=ax)
        ax.set_title(f"Boxplot {num_col} –ø–æ –≥—Ä—É–ø–∞—Ö {cat_col}")
        st.pyplot(fig)

        conclusion = "–í—ñ–¥—Ö–∏–ª—è—î–º–æ H‚ÇÄ: —î —Ä—ñ–∑–Ω–∏—Ü—è –º—ñ–∂ –≥—Ä—É–ø–∞–º–∏." if p_value < 0.05 else "–ù–µ –≤—ñ–¥—Ö–∏–ª—è—î–º–æ H‚ÇÄ."
        st.info(conclusion)

        prompt = f"–ü–æ—è—Å–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ ANOVA: F={f_stat:.4f}, p={p_value:.4f} –¥–ª—è –∑–º—ñ–Ω–Ω–æ—ó {num_col} –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó {cat_col}."
        st.markdown(explain_with_gpt(prompt))

    elif test_choice == "Z-—Ç–µ—Å—Ç":
        col = st.selectbox("–ó–º—ñ–Ω–Ω–∞", numeric_cols)
        population_mean = st.number_input("–°–µ—Ä–µ–¥–Ω—î –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ—ó —Å—É–∫—É–ø–Ω–æ—Å—Ç—ñ", value=0.0)
        sample = df[col].dropna()
        sample_mean = sample.mean()
        sample_std = sample.std()
        n = len(sample)
        z_stat = (sample_mean - population_mean) / (sample_std / (n ** 0.5))
        p_value = stats.norm.sf(abs(z_stat)) * 2
        st.write(f"Z-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {z_stat:.4f}")
        st.write(f"p-–∑–Ω–∞—á–µ–Ω–Ω—è: {p_value:.4f}")

        conclusion = "–í—ñ–¥—Ö–∏–ª—è—î–º–æ H‚ÇÄ." if p_value < 0.05 else "–ù–µ –≤—ñ–¥—Ö–∏–ª—è—î–º–æ H‚ÇÄ."
        st.info(conclusion)

        prompt = f"–ü–æ—è—Å–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ Z-—Ç–µ—Å—Ç—É: Z={z_stat:.4f}, p={p_value:.4f} –¥–ª—è –∑–º—ñ–Ω–Ω–æ—ó {col}."
        st.markdown(explain_with_gpt(prompt))

    elif test_choice == "–£—ó—Ç–Ω—ñ-–ú–∞–Ω–Ω–∞ (Mann-Whitney U)":
        col1 = st.selectbox("–ó–º—ñ–Ω–Ω–∞ 1", numeric_cols, key="mann_col1")
        col2 = st.selectbox("–ó–º—ñ–Ω–Ω–∞ 2", [col for col in numeric_cols if col != col1], key="mann_col2")
        sample1 = df[col1].dropna()
        sample2 = df[col2].dropna()
        u_stat, p_value = stats.mannwhitneyu(sample1, sample2)
        st.write(f"U-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {u_stat:.4f}")
        st.write(f"p-–∑–Ω–∞—á–µ–Ω–Ω—è: {p_value:.4f}")

        fig, ax = plt.subplots()
        sns.boxplot(data=df[[col1, col2]], ax=ax)
        ax.set_title(f"Boxplot –¥–ª—è {col1} —Ç–∞ {col2}")
        st.pyplot(fig)

        conclusion = "–í—ñ–¥—Ö–∏–ª—è—î–º–æ H‚ÇÄ." if p_value < 0.05 else "–ù–µ –≤—ñ–¥—Ö–∏–ª—è—î–º–æ H‚ÇÄ."
        st.info(conclusion)

        prompt = f"–ü–æ—è—Å–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É –£—ó—Ç–Ω—ñ-–ú–∞–Ω–Ω–∞: U={u_stat:.4f}, p={p_value:.4f} –¥–ª—è {col1} —ñ {col2}."
        st.markdown(explain_with_gpt(prompt))

    elif test_choice == "–•—ñ-–∫–≤–∞–¥—Ä–∞—Ç (Chi-square)":
        if len(categorical_cols) < 2:
            st.error("–ü–æ—Ç—Ä—ñ–±–Ω—ñ –¥–≤—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ!")
            return
        cat1 = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä—ñ–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ 1", categorical_cols, key="chi_cat1")
        cat2 = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä—ñ–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ 2", [c for c in categorical_cols if c != cat1], key="chi_cat2")
        contingency_table = pd.crosstab(df[cat1], df[cat2])
        chi2, p, dof, expected = stats.chi2_contingency(contingency_table)
        st.write("–¢–∞–±–ª–∏—Ü—è —Å–ø—Ä—è–∂–µ–Ω–æ—Å—Ç—ñ:")
        st.dataframe(contingency_table)
        st.write(f"Chi2: {chi2:.4f}")
        st.write(f"p-–∑–Ω–∞—á–µ–Ω–Ω—è: {p:.4f}")
        st.write(f"–°—Ç—É–ø–µ–Ω—ñ —Å–≤–æ–±–æ–¥–∏: {dof}")

        fig, ax = plt.subplots()
        contingency_table.plot(kind='bar', stacked=True, ax=ax)
        ax.set_title(f"Bar chart –¥–ª—è {cat1} —ñ {cat2}")
        st.pyplot(fig)

        conclusion = "–í—ñ–¥—Ö–∏–ª—è—î–º–æ H‚ÇÄ." if p < 0.05 else "–ù–µ –≤—ñ–¥—Ö–∏–ª—è—î–º–æ H‚ÇÄ."
        st.info(conclusion)

        prompt = f"–ü–æ—è—Å–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ö—ñ-–∫–≤–∞–¥—Ä–∞—Ç —Ç–µ—Å—Ç—É: Chi2={chi2:.4f}, p={p:.4f} –¥–ª—è –∑–º—ñ–Ω–Ω–∏—Ö {cat1} —ñ {cat2}."
        st.markdown(explain_with_gpt(prompt))

    elif test_choice == "–ö–æ—Ä–µ–ª—è—Ü—ñ—è –ü—ñ—Ä—Å–æ–Ω–∞":
        col1 = st.selectbox("–ó–º—ñ–Ω–Ω–∞ 1", numeric_cols, key="corr_col1")
        col2 = st.selectbox("–ó–º—ñ–Ω–Ω–∞ 2", [col for col in numeric_cols if col != col1], key="corr_col2")
        corr, p_value = stats.pearsonr(df[col1].dropna(), df[col2].dropna())
        st.write(f"–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∫–æ—Ä–µ–ª—è—Ü—ñ—ó –ü—ñ—Ä—Å–æ–Ω–∞: {corr:.4f}")
        st.write(f"p-–∑–Ω–∞—á–µ–Ω–Ω—è: {p_value:.4f}")

        fig, ax = plt.subplots()
        sns.scatterplot(x=col1, y=col2, data=df, ax=ax)
        ax.set_title(f"–ö–æ—Ä–µ–ª—è—Ü—ñ–π–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ {col1} vs {col2}")
        st.pyplot(fig)

        conclusion = "–Ü—Å–Ω—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω–æ –∑–Ω–∞—á—É—â–∞ –∫–æ—Ä–µ–ª—è—Ü—ñ—è." if p_value < 0.05 else "–ö–æ—Ä–µ–ª—è—Ü—ñ—è –Ω–µ–∑–Ω–∞—á—É—â–∞."
        st.info(conclusion)

        prompt = f"–ü–æ—è—Å–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∫–æ—Ä–µ–ª—è—Ü—ñ—ó –ü—ñ—Ä—Å–æ–Ω–∞: r={corr:.4f}, p={p_value:.4f} –º—ñ–∂ {col1} —ñ {col2}."
        st.markdown(explain_with_gpt(prompt))
