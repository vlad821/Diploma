import streamlit as st
import scipy.stats as stats
import pandas as pd
from gpt_helper import explain_with_gpt  # –Ü–º–ø–æ—Ä—Ç GPT-—Ñ—É–Ω–∫—Ü—ñ—ó

def app():
    st.title("üß™ –°—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≥—ñ–ø–æ—Ç–µ–∑")

    # üìò –ü–æ—è—Å–Ω–µ–Ω–Ω—è
    with st.expander("‚ÑπÔ∏è –©–æ —Ç–∞–∫–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≥—ñ–ø–æ—Ç–µ–∑?"):
        st.markdown("""
        **–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω–∏—Ö –≥—ñ–ø–æ—Ç–µ–∑** ‚Äî —Ü–µ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∏–ø—É—â–µ–Ω—å –ø—Ä–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ—ó —Å—É–∫—É–ø–Ω–æ—Å—Ç—ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∏–±—ñ—Ä–∫–∏.

        - **–ù—É–ª—å–æ–≤–∞ –≥—ñ–ø–æ—Ç–µ–∑–∞ (H‚ÇÄ)**: –º—ñ–∂ –≥—Ä—É–ø–∞–º–∏ –Ω–µ–º–∞—î —Å—É—Ç—Ç—î–≤–æ—ó —Ä—ñ–∑–Ω–∏—Ü—ñ.
        - **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞ –≥—ñ–ø–æ—Ç–µ–∑–∞ (H‚ÇÅ)**: –º—ñ–∂ –≥—Ä—É–ø–∞–º–∏ —î —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω–æ –∑–Ω–∞—á—É—â–∞ —Ä—ñ–∑–Ω–∏—Ü—è.

        –†—ñ–∑–Ω—ñ —Ç–µ—Å—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ç–∏–ø—É –¥–∞–Ω–∏—Ö —Ç–∞ –≥—ñ–ø–æ—Ç–µ–∑:
        - **t-—Ç–µ—Å—Ç**: –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Å–µ—Ä–µ–¥–Ω—ñ—Ö –¥–≤–æ—Ö –Ω–µ–∑–∞–ª–µ–∂–Ω–∏—Ö –≥—Ä—É–ø.
        - **ANOVA**: –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Å–µ—Ä–µ–¥–Ω—ñ—Ö –±—ñ–ª—å—à–µ –Ω—ñ–∂ –¥–≤–æ—Ö –≥—Ä—É–ø.
        - **Z-—Ç–µ—Å—Ç**: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö –≤–∏–±—ñ—Ä–æ–∫ –∞–±–æ –≤—ñ–¥–æ–º–∏—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö –≤—ñ–¥—Ö–∏–ª–µ–Ω—å.
        """)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö
    if "data" not in st.session_state:
        st.warning("üìÇ –°–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –¥–∞–Ω—ñ –Ω–∞ –≤–∫–ª–∞–¥—Ü—ñ '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö'")
        return

    df = st.session_state["data"]
    numeric_cols = df.select_dtypes(include='number').columns

    if len(numeric_cols) < 2:
        st.error("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω–æ —Ö–æ—á–∞ –± –¥–≤—ñ —á–∏—Å–ª–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è —Ç–µ—Å—Ç—É.")
        return

    # –í–∏–±—ñ—Ä —Ç–µ—Å—Ç—É
    st.subheader("üîé –í–∏–±–µ—Ä—ñ—Ç—å —Ç–µ—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≥—ñ–ø–æ—Ç–µ–∑")
    test_choice = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Ç–µ—Å—Ç", ["t-—Ç–µ—Å—Ç", "ANOVA", "Z-—Ç–µ—Å—Ç"])

    if test_choice == "t-—Ç–µ—Å—Ç":
        col1 = st.selectbox("–ó–º—ñ–Ω–Ω–∞ 1", numeric_cols, key="hypo_col1")
        col2 = st.selectbox("–ó–º—ñ–Ω–Ω–∞ 2", [col for col in numeric_cols if col != col1], key="hypo_col2")
        
        # –ü—Ä–æ–≤–µ–¥–µ–Ω–Ω—è t-—Ç–µ—Å—Ç—É
        sample1 = df[col1].dropna()
        sample2 = df[col2].dropna()

        t_stat, p_value = stats.ttest_ind(sample1, sample2)

        st.markdown(f"**üî¢ t-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:** `{t_stat:.4f}`")
        st.markdown(f"**üìä p-–∑–Ω–∞—á–µ–Ω–Ω—è:** `{p_value:.4f}`")

        if p_value < 0.05:
            st.success("üö® –í—ñ–¥—Ö–∏–ª—è—î–º–æ H‚ÇÄ: –Ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω–æ –∑–Ω–∞—á—É—â–∞ —Ä—ñ–∑–Ω–∏—Ü—è –º—ñ–∂ —Å–µ—Ä–µ–¥–Ω—ñ–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏.")
        else:
            st.info("‚úÖ –ù–µ –≤—ñ–¥—Ö–∏–ª—è—î–º–æ H‚ÇÄ: –ù–µ–º–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω–æ –∑–Ω–∞—á—É—â–æ—ó —Ä—ñ–∑–Ω–∏—Ü—ñ –º—ñ–∂ —Å–µ—Ä–µ–¥–Ω—ñ–º–∏.")
        
        explain_text = (
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ t-—Ç–µ—Å—Ç—É: t-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ = {t_stat:.4f}, p-–∑–Ω–∞—á–µ–Ω–Ω—è = {p_value:.4f}. "
            f"–ü–æ—è—Å–Ω–∏, —â–æ —Ü–µ –æ–∑–Ω–∞—á–∞—î –¥–ª—è –∑–º—ñ–Ω–Ω–∏—Ö '{col1}' —ñ '{col2}' —É –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≥—ñ–ø–æ—Ç–µ–∑."
        )
        response = explain_with_gpt(explain_text)
        st.subheader("üí° –ü–æ—è—Å–Ω–µ–Ω–Ω—è –≤—ñ–¥ GPT:")
        st.markdown(response)

    elif test_choice == "ANOVA":
        # –í–∏–±—ñ—Ä –∑–º—ñ–Ω–Ω–∏—Ö –¥–ª—è ANOVA
        col = st.selectbox("–í–∏–±–µ—Ä—ñ—Ç—å –∑–º—ñ–Ω–Ω—É –¥–ª—è ANOVA", numeric_cols)
        groups_col = st.selectbox("–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ–∞–ª—å–Ω—É –∑–º—ñ–Ω–Ω—É –¥–ª—è –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è", df.select_dtypes(include='object').columns)

        # –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–æ—ó –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        groups = df.groupby(groups_col)[col].apply(list)
        f_stat, p_value = stats.f_oneway(*groups)

        st.markdown(f"**üî¢ F-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:** `{f_stat:.4f}`")
        st.markdown(f"**üìä p-–∑–Ω–∞—á–µ–Ω–Ω—è:** `{p_value:.4f}`")

        if p_value < 0.05:
            st.success("üö® –í—ñ–¥—Ö–∏–ª—è—î–º–æ H‚ÇÄ: –Ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω–æ –∑–Ω–∞—á—É—â–∞ —Ä—ñ–∑–Ω–∏—Ü—è –º—ñ–∂ –≥—Ä—É–ø–∞–º–∏.")
        else:
            st.info("‚úÖ –ù–µ –≤—ñ–¥—Ö–∏–ª—è—î–º–æ H‚ÇÄ: –ù–µ–º–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω–æ –∑–Ω–∞—á—É—â–æ—ó —Ä—ñ–∑–Ω–∏—Ü—ñ –º—ñ–∂ –≥—Ä—É–ø–∞–º–∏.")
        
        explain_text = (
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ ANOVA: F-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ = {f_stat:.4f}, p-–∑–Ω–∞—á–µ–Ω–Ω—è = {p_value:.4f}. "
            f"–ü–æ—è—Å–Ω–∏, —â–æ —Ü–µ –æ–∑–Ω–∞—á–∞—î –¥–ª—è –∑–º—ñ–Ω–Ω–æ—ó '{col}' —ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{groups_col}' —É –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≥—ñ–ø–æ—Ç–µ–∑."
        )
        response = explain_with_gpt(explain_text)
        st.subheader("üí° –ü–æ—è—Å–Ω–µ–Ω–Ω—è –≤—ñ–¥ GPT:")
        st.markdown(response)

    elif test_choice == "Z-—Ç–µ—Å—Ç":
        # –í–∏–±—ñ—Ä –∑–º—ñ–Ω–Ω–æ—ó –¥–ª—è Z-—Ç–µ—Å—Ç—É
        col = st.selectbox("–í–∏–±–µ—Ä—ñ—Ç—å –∑–º—ñ–Ω–Ω—É –¥–ª—è Z-—Ç–µ—Å—Ç—É", numeric_cols)
        population_mean = st.number_input("–í–≤–µ–¥—ñ—Ç—å —Å–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ—ó —Å—É–∫—É–ø–Ω–æ—Å—Ç—ñ", value=0.0)
        sample = df[col].dropna()

        # –ü—Ä–æ–≤–µ–¥–µ–Ω–Ω—è Z-—Ç–µ—Å—Ç—É
        sample_mean = sample.mean()
        sample_std = sample.std()
        sample_size = len(sample)
        z_stat = (sample_mean - population_mean) / (sample_std / (sample_size ** 0.5))
        p_value = stats.norm.sf(abs(z_stat)) * 2  # –î–≤–æ—Å—Ç–æ—Ä–æ–Ω–Ω—ñ–π Z-—Ç–µ—Å—Ç

        st.markdown(f"**üî¢ Z-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:** `{z_stat:.4f}`")
        st.markdown(f"**üìä p-–∑–Ω–∞—á–µ–Ω–Ω—è:** `{p_value:.4f}`")

        if p_value < 0.05:
            st.success("üö® –í—ñ–¥—Ö–∏–ª—è—î–º–æ H‚ÇÄ: –†—ñ–∑–Ω–∏—Ü—è –º—ñ–∂ –≤–∏–±—ñ—Ä–∫–æ–≤–∏–º —Å–µ—Ä–µ–¥–Ω—ñ–º —ñ –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–∏–º —Å–µ—Ä–µ–¥–Ω—ñ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω–æ –∑–Ω–∞—á—É—â–∞.")
        else:
            st.info("‚úÖ –ù–µ –≤—ñ–¥—Ö–∏–ª—è—î–º–æ H‚ÇÄ: –†—ñ–∑–Ω–∏—Ü—è –º—ñ–∂ –≤–∏–±—ñ—Ä–∫–æ–≤–∏–º —Å–µ—Ä–µ–¥–Ω—ñ–º —ñ –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–∏–º —Å–µ—Ä–µ–¥–Ω—ñ–º –Ω–µ–∑–Ω–∞—á—É—â–∞.")
        
        explain_text = (
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ Z-—Ç–µ—Å—Ç—É: Z-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ = {z_stat:.4f}, p-–∑–Ω–∞—á–µ–Ω–Ω—è = {p_value:.4f}. "
            f"–ü–æ—è—Å–Ω–∏, —â–æ —Ü–µ –æ–∑–Ω–∞—á–∞—î –¥–ª—è –∑–º—ñ–Ω–Ω–æ—ó '{col}' —É –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≤–∏–±—ñ—Ä–∫–∏ —Ç–∞ –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ—ó —Å—É–∫—É–ø–Ω–æ—Å—Ç—ñ."
        )
        response = explain_with_gpt(explain_text)
        st.subheader("üí° –ü–æ—è—Å–Ω–µ–Ω–Ω—è –≤—ñ–¥ GPT:")
        st.markdown(response)

