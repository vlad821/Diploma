import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression, LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.cluster import KMeans
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, mean_squared_error, mean_absolute_error, confusion_matrix, ConfusionMatrixDisplay
import openai

# –§—É–Ω–∫—Ü—ñ—è –ø–æ—è—Å–Ω–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é GPT
def explain_with_gpt(user_text):
    try:
        openai.api_key = st.secrets["OPENAI_API_KEY"]
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢–∏ ‚Äî –∞–Ω–∞–ª—ñ—Ç–∏–∫ –¥–∞–Ω–∏—Ö, —è–∫–∏–π –ø–æ—è—Å–Ω—é—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø—Ä–æ—Å—Ç–æ—é –º–æ–≤–æ—é."},
                {"role": "user", "content": user_text}
            ]
        )
        st.write("üìò GPT –ø–æ—è—Å–Ω–µ–Ω–Ω—è:")
        st.success(response['choices'][0]['message']['content'])
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ OpenAI: {e}")

# –õ—ñ–Ω—ñ–π–Ω–∞ —Ä–µ–≥—Ä–µ—Å—ñ—è
def linear_regression(df):
    st.subheader("üìà –õ—ñ–Ω—ñ–π–Ω–∞ —Ä–µ–≥—Ä–µ—Å—ñ—è")
    num_cols = df.select_dtypes(include='number').columns.tolist()
    
    if len(num_cols) < 2:
        st.warning("–£ –¥–∞—Ç–∞—Å–µ—Ç—ñ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —á–∏—Å–ª–æ–≤–∏—Ö —Å—Ç–æ–≤–ø—Ü—ñ–≤ –¥–ª—è –ª—ñ–Ω—ñ–π–Ω–æ—ó —Ä–µ–≥—Ä–µ—Å—ñ—ó.")
        return

    target_col = st.selectbox("–¶—ñ–ª—å–æ–≤–∞ –∑–º—ñ–Ω–Ω–∞", num_cols, key="target_col_lr")
    features = [col for col in num_cols if col != target_col]

    if st.button("–ù–∞–≤—á–∏—Ç–∏ –º–æ–¥–µ–ª—å –ª—ñ–Ω—ñ–π–Ω–æ—ó —Ä–µ–≥—Ä–µ—Å—ñ—ó", key="train_button_lr"):
        X = df[features]
        y = df[target_col]

        # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ä—è–¥–∫—ñ–≤ –∑ NaN
        data = pd.concat([X, y], axis=1).dropna()

        if data.empty:
            st.error("‚ùå –ü—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å –Ω–µ –∑–∞–ª–∏—à–∏–ª–æ—Å—å –∂–æ–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞ –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è.")
            return

        X = data[features]
        y = data[target_col]

        if len(data) < 2:
            st.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∑—Ä–∞–∑–∫—ñ–≤ –¥–ª—è —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –Ω–∞ train/test. –ú—ñ–Ω—ñ–º—É–º ‚Äî 2.")
            return

        # –†–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω—ñ —Ç–∞ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
        try:
            X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)
        except ValueError as e:
            st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–æ–¥—ñ–ª—É: {str(e)}")
            return

        # –ù–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ
        model = LinearRegression()
        model.fit(X_train, y_train)
        predictions = model.predict(X_test)

        # –†–µ–∑—É–ª—å—Ç–∞—Ç–∏
        st.write("–ü—Ä–æ–≥–Ω–æ–∑–∏:")
        st.write(predictions)

        st.write("üîé –û—Ü—ñ–Ω–∫–∞ –º–æ–¥–µ–ª—ñ:")
        mae = mean_absolute_error(y_test, predictions)
        mse = mean_squared_error(y_test, predictions)
        st.write(f"MAE: {mae}")
        st.write(f"MSE: {mse}")

        # –ì—Ä–∞—Ñ—ñ–∫
        fig, ax = plt.subplots()
        ax.scatter(y_test, predictions, alpha=0.7)
        ax.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color='red', linestyle='--')
        ax.set_xlabel("–°–ø—Ä–∞–≤–∂–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è")
        ax.set_ylabel("–ü—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è")
        ax.set_title("üìà –ü—Ä–æ–≥–Ω–æ–∑ vs –Ü—Å—Ç–∏–Ω–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è")
        st.pyplot(fig)

        # GPT –ø–æ—è—Å–Ω–µ–Ω–Ω—è
        explain_with_gpt(f"–Ø –Ω–∞–≤—á–∏–≤ –º–æ–¥–µ–ª—å –ª—ñ–Ω—ñ–π–Ω–æ—ó —Ä–µ–≥—Ä–µ—Å—ñ—ó. MAE = {mae}, MSE = {mse}. –ü–æ—è—Å–Ω–∏ —Ü—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏.")


# –õ–æ–≥—ñ—Å—Ç–∏—á–Ω–∞ —Ä–µ–≥—Ä–µ—Å—ñ—è
import pandas as pd
import streamlit as st
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix, ConfusionMatrixDisplay
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt

def logistic_regression(df):
    st.subheader("üîç –õ–æ–≥—ñ—Å—Ç–∏—á–Ω–∞ —Ä–µ–≥—Ä–µ—Å—ñ—è")

    # 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —á–∏—Å–ª–æ–≤–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
    try:
        num_cols = df.select_dtypes(include='number').columns.tolist()
        if len(num_cols) < 2:
            st.warning("–£ –¥–∞—Ç–∞—Å–µ—Ç—ñ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —á–∏—Å–ª–æ–≤–∏—Ö —Å—Ç–æ–≤–ø—Ü—ñ–≤ –¥–ª—è –ª–æ–≥—ñ—Å—Ç–∏—á–Ω–æ—ó —Ä–µ–≥—Ä–µ—Å—ñ—ó.")
            return
    except Exception as e:
        st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—ñ —á–∏—Å–ª–æ–≤–∏—Ö —Å—Ç–æ–≤–ø—Ü—ñ–≤: {e}")
        return

    # 2. –í–∏–±—ñ—Ä —Ü—ñ–ª—å–æ–≤–æ—ó –∑–º—ñ–Ω–Ω–æ—ó
    target_col = st.selectbox("–¶—ñ–ª—å–æ–≤–∞ –∑–º—ñ–Ω–Ω–∞", num_cols, key="target_col_logistic")
    features = [col for col in num_cols if col != target_col]

    # 3. –ú–µ—Ç–æ–¥ –±—ñ–Ω–∞—Ä–∏–∑–∞—Ü—ñ—ó
    binarization_method = st.radio(
        "–ú–µ—Ç–æ–¥ –±—ñ–Ω–∞—Ä–∏–∑–∞—Ü—ñ—ó (–¥–ª—è –Ω–µ–ø–µ—Ä–µ—Ä–≤–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö):",
        ["–ú–µ–¥—ñ–∞–Ω–∞", "–°–µ—Ä–µ–¥–Ω—î", "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏–π –ø–æ—Ä—ñ–≥"]
    )

    custom_threshold = None
    if binarization_method == "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏–π –ø–æ—Ä—ñ–≥":
        custom_threshold = st.number_input("–í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –ø–æ—Ä—ñ–≥", value=0.0, step=0.1)

    if st.button("–ù–∞–≤—á–∏—Ç–∏ –ª–æ–≥—ñ—Å—Ç–∏—á–Ω—É —Ä–µ–≥—Ä–µ—Å—ñ—é", key="train_button_logistic"):
        try:
            X = df[features]
            y = df[target_col]
            data = pd.concat([X, y], axis=1).dropna()
            X = data[features]
            y = data[target_col]
        except Exception as e:
            st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥–≥–æ—Ç–æ–≤—Ü—ñ –¥–∞–Ω–∏—Ö: {e}")
            return

        try:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –∞–±–æ —Ä—É—á–Ω–∞ –±—ñ–Ω–∞—Ä–∏–∑–∞—Ü—ñ—è
            if y.nunique() > 2:
                if binarization_method == "–ú–µ–¥—ñ–∞–Ω–∞":
                    threshold = y.median()
                elif binarization_method == "–°–µ—Ä–µ–¥–Ω—î":
                    threshold = y.mean()
                elif binarization_method == "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏–π –ø–æ—Ä—ñ–≥":
                    threshold = custom_threshold
                else:
                    raise ValueError("–ù–µ–≤—ñ–¥–æ–º–∏–π –º–µ—Ç–æ–¥ –±—ñ–Ω–∞—Ä–∏–∑–∞—Ü—ñ—ó")

                st.warning(f"‚ö†Ô∏è –¶—ñ–ª—å–æ–≤–∞ –∑–º—ñ–Ω–Ω–∞ –±—É–ª–∞ –±—ñ–Ω–∞—Ä–∏–∑–æ–≤–∞–Ω–∞ (1 —è–∫—â–æ > {threshold:.2f}, —ñ–Ω–∞–∫—à–µ 0).")
                y = (y > threshold).astype(int)

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: —á–∏ –¥—ñ–π—Å–Ω–æ —Å—Ç–∞–ª–æ 2 –∫–ª–∞—Å–∏
            if y.nunique() != 2:
                st.error(f"‚ùå –ü—ñ—Å–ª—è –±—ñ–Ω–∞—Ä–∏–∑–∞—Ü—ñ—ó –∑–Ω–∞–π–¥–µ–Ω–æ {y.nunique()} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–ª–∞—Å—ñ–≤. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ.")
                return
        except Exception as e:
            st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –±—ñ–Ω–∞—Ä–∏–∑–∞—Ü—ñ—ó: {e}")
            return

        # –†–æ–∑–±–∏—Ç—Ç—è –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω—ñ —ñ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
        try:
            X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)
        except Exception as e:
            st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö: {e}")
            return

        # –ú–æ–¥–µ–ª—å –ª–æ–≥—ñ—Å—Ç–∏—á–Ω–æ—ó —Ä–µ–≥—Ä–µ—Å—ñ—ó
        try:
            model = LogisticRegression(max_iter=1000)
            model.fit(X_train, y_train)
        except Exception as e:
            st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–≤—á–∞–Ω–Ω—ñ –ª–æ–≥—ñ—Å—Ç–∏—á–Ω–æ—ó —Ä–µ–≥—Ä–µ—Å—ñ—ó: {e}")
            return

        # –ü—Ä–æ–≥–Ω–æ–∑ —ñ –≤–∏–≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        try:
            preds = model.predict(X_test)
            st.text("üìä –ó–≤—ñ—Ç –ø—Ä–æ –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—é:")
            st.text(classification_report(y_test, preds))

            cm = confusion_matrix(y_test, preds)
            fig, ax = plt.subplots()
            disp = ConfusionMatrixDisplay(confusion_matrix=cm)
            disp.plot(ax=ax)
            ax.set_title("–ú–∞—Ç—Ä–∏—Ü—è –ø–ª—É—Ç–∞–Ω–∏–Ω–∏ (–ª–æ–≥—ñ—Å—Ç–∏—á–Ω–∞ —Ä–µ–≥—Ä–µ—Å—ñ—è)")
            st.pyplot(fig)

        except Exception as e:
            st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ü—ñ–Ω—é–≤–∞–Ω–Ω—ñ –º–æ–¥–µ–ª—ñ: {e}")
            return

        # –ü–æ—è—Å–Ω–µ–Ω–Ω—è (—è–∫—â–æ GPT —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–∏–π)
        try:
            explain_with_gpt(f"–Ø –Ω–∞–≤—á–∏–≤ –ª–æ–≥—ñ—Å—Ç–∏—á–Ω—É —Ä–µ–≥—Ä–µ—Å—ñ—é. –û—Å—å –∑–≤—ñ—Ç: {classification_report(y_test, preds)}")
        except Exception:
            st.info("‚úÖ –ú–æ–¥–µ–ª—å –Ω–∞–≤—á–µ–Ω–æ. GPT-–ø–æ—è—Å–Ω–µ–Ω–Ω—è –Ω–∞—Ä–∞–∑—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ.")

# –î–µ—Ä–µ–≤–æ —Ä—ñ—à–µ–Ω—å
def decision_tree(df):
    st.subheader("üå≥ –î–µ—Ä–µ–≤–æ —Ä—ñ—à–µ–Ω—å")
    num_cols = df.select_dtypes(include='number').columns.tolist()
    target_col = st.selectbox("–¶—ñ–ª—å–æ–≤–∞ –∑–º—ñ–Ω–Ω–∞", num_cols, key="target_col_dt")
    features = [col for col in num_cols if col != target_col]

    if st.button("–ù–∞–≤—á–∏—Ç–∏ –¥–µ—Ä–µ–≤–æ —Ä—ñ—à–µ–Ω—å", key="train_button_dt"):
        X = df[features]
        y = df[target_col]
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)

        model = DecisionTreeClassifier()
        model.fit(X_train, y_train)
        preds = model.predict(X_test)

        st.text("–ó–≤—ñ—Ç –ø—Ä–æ –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—é:")
        st.text(classification_report(y_test, preds))

        cm = confusion_matrix(y_test, preds)
        fig, ax = plt.subplots()
        disp = ConfusionMatrixDisplay(confusion_matrix=cm)
        disp.plot(ax=ax)
        ax.set_title("–ú–∞—Ç—Ä–∏—Ü—è –ø–ª—É—Ç–∞–Ω–∏–Ω–∏ (–¥–µ—Ä–µ–≤–æ —Ä—ñ—à–µ–Ω—å)")
        st.pyplot(fig)

        explain_with_gpt(f"–Ø –Ω–∞–≤—á–∏–≤ –º–æ–¥–µ–ª—å –¥–µ—Ä–µ–≤–∞ —Ä—ñ—à–µ–Ω—å. –û—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏: {classification_report(y_test, preds)}")

# –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—è K-Means
def kmeans_clustering(df):
    st.subheader("üß† –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—è K-Means")
    num_cols = df.select_dtypes(include='number').columns.tolist()

    if len(num_cols) < 2:
        st.warning("–î–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—ó –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ö–æ—á–∞ –± –¥–≤–∞ —á–∏—Å–ª–æ–≤—ñ —Å—Ç–æ–≤–ø—Ü—ñ.")
        return

    k = st.slider("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤", 1, 10, 3)

    if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—é", key="train_button_kmeans"):
        X = df[num_cols]
        kmeans = KMeans(n_clusters=k, random_state=42)
        clusters = kmeans.fit_predict(X)

        df['Cluster'] = clusters
        st.write("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—ó:")
        st.dataframe(df)

        fig, ax = plt.subplots()
        sns.scatterplot(data=df, x=num_cols[0], y=num_cols[1], hue='Cluster', palette='viridis', ax=ax)
        ax.set_title("–†–æ–∑–ø–æ–¥—ñ–ª –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤")
        st.pyplot(fig)

        explain_with_gpt(f"–Ø –∑–∞—Å—Ç–æ—Å—É–≤–∞–≤ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—é K-Means –∑ {k} –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏. –û—Å—å –æ—Ç—Ä–∏–º–∞–Ω—ñ –∫–ª–∞—Å—Ç–µ—Ä–∏: {list(clusters)}")

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É
def app():
    st.title("üìä –ú–æ–¥–µ–ª—ñ –º–∞—à–∏–Ω–Ω–æ–≥–æ –Ω–∞–≤—á–∞–Ω–Ω—è")

    # –û—á—ñ–∫—É—î–º–æ, —â–æ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –±—É–¥–µ —É —Å–µ—Å—ñ—ó (–º–∞—î –±—É—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π —Ä–∞–Ω—ñ—à–µ –≤ —ñ–Ω—à—ñ–π —á–∞—Å—Ç–∏–Ω—ñ –ø—Ä–æ–≥—Ä–∞–º–∏)
    if "data" in st.session_state:
        tabs = st.tabs([
            "üìà –õ—ñ–Ω—ñ–π–Ω–∞ —Ä–µ–≥—Ä–µ—Å—ñ—è",
            "üîç –õ–æ–≥—ñ—Å—Ç–∏—á–Ω–∞ —Ä–µ–≥—Ä–µ—Å—ñ—è",
            "üß† K-Means –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—è",
            "üå≥ –î–µ—Ä–µ–≤–æ —Ä—ñ—à–µ–Ω—å"
        ])

        with tabs[0]:
            linear_regression(st.session_state["data"])
        with tabs[1]:
            logistic_regression(st.session_state["data"])
        with tabs[2]:
            kmeans_clustering(st.session_state["data"])
        with tabs[3]:
            decision_tree(st.session_state["data"])
    else:
        st.warning("–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –Ω–∞–±—ñ—Ä –¥–∞–Ω–∏—Ö —á–µ—Ä–µ–∑ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.")
