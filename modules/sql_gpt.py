import streamlit as st
import pandas as pd
import pandasql as psql
import openai
from gpt_helper import explain_with_gpt  # –ü–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞

# ==== –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è SQL —á–µ—Ä–µ–∑ GPT ====
def generate_sql_with_gpt(user_prompt, column_names, language):
    try:
        openai.api_key = st.secrets["OPENAI_API_KEY"]
        columns_str = ", ".join(column_names)

        system_message = {
            "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞": f"–¢–∏ ‚Äî SQL-–∞—Å–∏—Å—Ç–µ–Ω—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –≤–∞–ª—ñ–¥–Ω—ñ SQL-–∑–∞–ø–∏—Ç–∏ –¥–ª—è pandas DataFrame –∑ –∫–æ–ª–æ–Ω–∫–∞–º–∏: {columns_str}. "
                          f"–ü–æ–≤–µ—Ä–Ω–∏ –ª–∏—à–µ —Å–∞–º SQL-–∑–∞–ø–∏—Ç –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω—å —á–∏ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É. –ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π SELECT *.",
            "English": f"You are a SQL assistant. Your task is to generate valid SQL queries for a pandas DataFrame with columns: {columns_str}. "
                       f"Return only the SQL query without any explanation or extra text. Do not use SELECT *."
        }

        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": system_message[language]},
                {"role": "user", "content": user_prompt}
            ],
            temperature=0
        )
        return response.choices[0].message.content.strip()

    except Exception as e:
        st.error(f"‚ùå {'–ü–æ–º–∏–ª–∫–∞' if language == '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞' else 'Error'}: {e}")
        return None

# ==== –û—Å–Ω–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ Streamlit ====
def app():
    # üåê –ü–µ—Ä–µ–º–∏–∫–∞—á –º–æ–≤–∏
    language = st.radio("üåê –í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / Choose language:", ["–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "English"], horizontal=True)

    # ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö
    if "data" not in st.session_state or st.session_state["data"] is None:
        st.warning("‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –¥–∞–Ω—ñ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö'." if language == "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞"
                   else "‚ö†Ô∏è Please upload data on the 'Upload Data' page.")
        return

    df = st.session_state["data"]

    # üìã –õ–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è
    labels = {
        "title": "üí¨ SQL-–∑–∞–ø–∏—Ç–∏ –¥–æ –¥–∞–Ω–∏—Ö —á–µ—Ä–µ–∑ GPT" if language == "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞" else "üí¨ SQL Queries to Data via GPT",
        "preview": "üìä –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –¥–∞–Ω–∏—Ö" if language == "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞" else "üìä Data Preview",
        "prompt": "üìù –û–ø–∏—à—ñ—Ç—å –∑–∞–ø–∏—Ç –ø—Ä–∏—Ä–æ–¥–Ω–æ—é –º–æ–≤–æ—é:" if language == "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞" else "üìù Describe your query in natural language:",
        "placeholder": "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ü–æ—Ä–∞—Ö—É–π —Å–µ—Ä–µ–¥–Ω—é –∑–∞—Ä–ø–ª–∞—Ç—É –ø–æ –∫–æ–∂–Ω–æ–º—É –≤—ñ–¥–¥—ñ–ª—É" if language == "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞"
                      else "Example: Calculate the average salary by department",
        "generate": "üöÄ –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ç–∞ –≤–∏–∫–æ–Ω–∞—Ç–∏ SQL-–∑–∞–ø–∏—Ç" if language == "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞" else "üöÄ Generate and run SQL query",
        "empty_prompt": "üîî –í–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó SQL." if language == "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞" else "üîî Please enter a query to generate SQL.",
        "executed": "‚úÖ –ó–∞–ø–∏—Ç –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ." if language == "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞" else "‚úÖ Query executed successfully.",
        "explain": "üí° –ü–æ—è—Å–Ω–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é GPT" if language == "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞" else "üí° Explain result with GPT",
        "gen_fail": "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ SQL-–∑–∞–ø–∏—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑." if language == "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞"
                    else "‚ö†Ô∏è Failed to generate SQL query. Try again."
    }

    # üñºÔ∏è –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    st.title(labels["title"])
    st.subheader(labels["preview"])
    st.dataframe(df.head())

    user_prompt = st.text_area(labels["prompt"], placeholder=labels["placeholder"])

    if st.button(labels["generate"]):
        if not user_prompt.strip():
            st.warning(labels["empty_prompt"])
            return

        with st.spinner("üß† GPT –ø—Ä–∞—Ü—é—î..." if language == "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞" else "üß† GPT is working..."):
            sql_query = generate_sql_with_gpt(user_prompt, df.columns.tolist(), language)

        if sql_query:
            # –ó–∞–º—ñ–Ω–∞ —ñ–º–µ–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ 'dataframe' –Ω–∞ 'df' –¥–ª—è pandasql
            sql_query = sql_query.replace("dataframe", "df")

            st.code(sql_query, language="sql")
            try:
                result = psql.sqldf(sql_query, {"df": df})
                st.success(labels["executed"])
                st.dataframe(result)

                if not result.empty and st.checkbox(labels["explain"]):
                    explain_with_gpt(str(result.head(5)), language=language)

            except Exception as e:
                st.error(f"‚ùå {'–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ SQL-–∑–∞–ø–∏—Ç—É' if language == '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞' else 'Error running SQL query'}: {e}")
        else:
            st.warning(labels["gen_fail"])


# –î–ª—è –±–∞–≥–∞—Ç–æ—Å—Ç–æ—Ä—ñ–Ω–∫–æ–≤–æ—ó –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó (–Ω–µ –≤–∏–∫–ª–∏–∫–∞–π—Ç–µ st.set_page_config —Ç—É—Ç –≤–¥—Ä—É–≥–µ!)
if __name__ == "__main__":
    st.set_page_config(page_title="SQL + GPT", layout="wide")  # –ü–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –ü–ï–†–®–ò–ú —Ä—è–¥–∫–æ–º –≤ —Å–∫—Ä–∏–ø—Ç—ñ
    app()
