import requests
import streamlit as st
import pandas as pd
from docx import Document
import pdfplumber  # –¥–ª—è —Ç–∞–±–ª–∏—Ü—å –∑ PDF
from io import StringIO

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑—á–∏—Ç—É–≤–∞–Ω–Ω—è DOCX —Ñ–∞–π–ª—ñ–≤
def read_docx(file):
    doc = Document(file)
    dataframes = []

    # –ó—á–∏—Ç—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å
    for table in doc.tables:
        rows = []
        for row in table.rows:
            rows.append([cell.text.strip() for cell in row.cells])
        df = pd.DataFrame(rows)
        dataframes.append(df)

    # –Ø–∫—â–æ —Ç–∞–±–ª–∏—Ü—å –Ω–µ–º–∞—î ‚Äì –∑—á–∏—Ç–∞—Ç–∏ —Ç–µ–∫—Å—Ç
    if not dataframes:
        text = "\n".join([para.text for para in doc.paragraphs if para.text.strip() != ""])
        return pd.DataFrame({"–¢–µ–∫—Å—Ç": text.split("\n")})
    else:
        return pd.concat(dataframes, ignore_index=True)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑—á–∏—Ç—É–≤–∞–Ω–Ω—è PDF —Ñ–∞–π–ª—ñ–≤
def read_pdf(file):
    dataframes = []

    with pdfplumber.open(file) as pdf:
        for page in pdf.pages:
            tables = page.extract_tables()
            for table in tables:
                df = pd.DataFrame(table)
                dataframes.append(df)

    if not dataframes:
        text = ""
        with pdfplumber.open(file) as pdf:
            for page in pdf.pages:
                text += page.extract_text() + "\n"
        return pd.DataFrame({"–¢–µ–∫—Å—Ç": text.split("\n")})
    else:
        return pd.concat(dataframes, ignore_index=True)

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ–¥–∞—Ç–∫—É
def app():
    st.title("üìÅ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö")

    # --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ URL ---
    st.subheader("üåê –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ URL")
    url_input = st.text_input("–í—Å—Ç–∞–≤—Ç–µ URL –¥–æ CSV, JSON –∞–±–æ TXT-—Ñ–∞–π–ª—É:")

    if st.button("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ URL") and url_input:
        try:
            response = requests.get(url_input)
            response.raise_for_status()
            content_type = response.headers.get("Content-Type", "")

            if "text/csv" in content_type or url_input.endswith(".csv"):
                df = pd.read_csv(StringIO(response.text))
            elif "application/json" in content_type or url_input.endswith(".json"):
                df = pd.read_json(StringIO(response.text))
            elif url_input.endswith(".txt"):
                df = pd.read_csv(StringIO(response.text), delimiter="\t")
            else:
                st.error("‚ùå –ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∞–±–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π URL.")
                return

            st.success("‚úÖ –î–∞–Ω—ñ –∑ URL –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
            st.dataframe(df)
            st.session_state["data"] = df

        except Exception as e:
            st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∑ URL: {e}")

    # --- –õ–æ–∫–∞–ª—å–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ---
    st.subheader("üìÇ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –∑ –∫–æ–º–ø‚Äô—é—Ç–µ—Ä–∞")
    uploaded_file = st.file_uploader(
        "–û–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª (CSV, Excel, JSON, TXT, Parquet, DOCX, PDF)", 
        type=["csv", "xlsx", "json", "txt", "parquet", "docx", "pdf"]
    )

    if uploaded_file:
        try:
            # –û–±—Ä–æ–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª—É (–∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω)
            if uploaded_file.name.endswith(".csv"):
                df = pd.read_csv(uploaded_file)
            elif uploaded_file.name.endswith(".xlsx"):
                df = pd.read_excel(uploaded_file)
            elif uploaded_file.name.endswith(".json"):
                df = pd.read_json(uploaded_file)
            elif uploaded_file.name.endswith(".txt"):
                df = pd.read_csv(uploaded_file, delimiter="\t")
            elif uploaded_file.name.endswith(".parquet"):
                df = pd.read_parquet(uploaded_file)
            elif uploaded_file.name.endswith(".docx"):
                df = read_docx(uploaded_file)
            elif uploaded_file.name.endswith(".pdf"):
                df = read_pdf(uploaded_file)
            else:
                st.error("‚ùå –ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É.")
                return

            st.success("‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!")
            st.dataframe(df)
            st.session_state["data"] = df

        except Exception as e:
            st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ: {e}")
    else:
        st.info("‚¨ÜÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–∞–π–ª –∞–±–æ –≤–∫–∞–∂—ñ—Ç—å URL –¥–ª—è –ø–æ—á–∞—Ç–∫—É.")